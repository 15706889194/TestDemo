<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">


    <!-- 自动扫描该包 -->
    <context:component-scan base-package="com.zhenxin" />

    <!-- 启用mvc注解 -->



    <!--    <mvc:interceptors>-->
    <!--        <mvc:interceptor>-->
    <!--            <mvc:mapping path="/**"/>-->
    <!--            <mvc:exclude-mapping path="/user/login"/>-->
    <!--            <mvc:exclude-mapping path="/login"/>-->
    <!--            <mvc:exclude-mapping path="/index"/>-->
    <!--            <mvc:exclude-mapping path="/css/**"/>-->
    <!--            <mvc:exclude-mapping path="/fonts/**"/>-->
    <!--            <mvc:exclude-mapping path="/js/**"/>-->
    <!--            <bean class="com.zhenxin.filter.TokenInterceptor"/>-->
    <!--        </mvc:interceptor>-->
    <!--    </mvc:interceptors>-->
    <!--suppress UnparsedCustomBeanInspection -->

    <tx:annotation-driven>
        <tx:argument-resolvers>
            <bean class="com.zhenxin.filter.TokenInterceptor" />
        </tx:argument-resolvers>
    </tx:annotation-driven>




    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <!--    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--        &lt;!&ndash; 自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 &ndash;&gt;-->
    <!--        <property name="prefix" value="/WEB-INF/pages/" />-->
    <!--        <property name="suffix" value=".html"></property>-->
    <!--    </bean>-->

    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/pages" />
    </bean>
    <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean"></bean>


    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="contentType" value="text/html; charset=utf-8"/>
        <property name="cache" value="true"/>
        <!-- <property name="prefix" value="/WEB-INF/html/" /> -->
        <property name="suffix" value=".html"/>
        <property name="order" value="0"/>
    </bean>

    <!--    <bean id="viewResolverJsp"-->
    <!--          class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--        <property name="prefix" value="/WEB-INF/pages/" />-->
    <!--        <property name="suffix" value=".jsp" />-->
    <!--        <property name="order" value="1"/>-->
    <!--    </bean>-->
    <!-- 整合DRUID -->
    <util:properties id="cfg" location="classpath:config.properties"/>

    <!--配置DruidDataSource连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="true">
        <property name="driverClassName" value="#{cfg.driver}" />
        <property name="url" value="#{cfg.url}" />
        <property name="username" value="#{cfg.username}" />
        <property name="password" value="#{cfg.password}" />
    </bean>

    <!-- 整合mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-configs.xml"></property>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" >
            <list><value>classpath:mapper/*.xml</value></list>
        </property>
    </bean>
    <tx:default-servlet-handler/>

    <!-- 扫描DAO接口所在包，Spring会自动查找其下的dao
                  接口，然后为接口创建代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage"
                  value="com.zhenxin.admin"/>
    </bean>
    <!-- 3)配置事务应用(在哪些业务对象的哪些方法上使用事务) -->
    <aop:config>
        <aop:pointcut expression="execution(* com.zhenxin.service..*.*(..))"
                      id="txPointcut"/>
    </aop:config>
</beans>